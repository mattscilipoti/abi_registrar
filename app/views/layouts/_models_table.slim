- if models.blank?
    | None found
- else
  - allow_destroy = false if allow_destroy.nil?
  - allow_edit = true if allow_edit.nil?
  - allow_show = true if allow_show.nil?
  - allow_sort = false if allow_sort.nil?
  - default_sort = { column: columns.first, direction: :asc }
  - sort = params[:sort] || default_sort if sort.nil?
  - sort_column = sort.fetch(:column)
  - sort_direction = sort.fetch(:direction)
  - sorted_models = sort_models(models, sort)

  table
    thead
      - for column_name in columns do
        - column_caption = column_name.to_s.gsub('_i18n', '').gsub('_link_tag', '').gsub('_tag', '').titleize
        - index_path = models.first.class.table_name
        - css_classes = []
        - css_classes << 'boolean' if column_name.ends_with?('?')

        -# sort link
        - if column_name.to_s == sort_column.to_s
          - sort_direction_indicator = sort_direction.to_s == 'asc' ? '▲' : '▼'
          - column_caption += " #{sort_direction_indicator}"

        - if allow_sort
          - sort_link_params = { sort: {column: column_name, direction: sort_direction }}
          - if column_name.to_s == sort_column.to_s
            -# toggle sort_direction
            - sort_link_params[:sort][:direction] = (sort_direction == 'asc') ? 'desc' : 'asc'
          - index_uri = Addressable::URI.new(path: index_path, query: sort_link_params.to_param)
          th *{class: css_classes} = link_to(column_caption, index_uri.to_s, class: 'no-link-icon')
        - else
          th *{class: css_classes} = column_caption

      - if allow_edit
        th Edit
      - if allow_destroy
        th Delete
    tbody

      - sorted_models.each do |model|
        tr
          - columns.each_with_index do |column_name, column_index|
            - column_value = model.send(column_name)
            - css_classes = []
            - if column_value.in? [true, false]
              - column_value = column_value ? '✓' : '❌'
              - css_classes << 'boolean'
            td *{class: css_classes}
              -if column_index == 0
                - if allow_show
                  - column_model = model.decorated? ? model.object : model
                  - if column_model.methods.include?(allow_show)
                    - column_model = column_model.send(allow_show)

                  =link_to_if column_model, column_value || "⁇", column_model, title: "Show this #{column_model.class.name}"
                - else
                  =column_value
              -else
                =column_value
          - if allow_edit
            td= link_to "Edit", edit_polymorphic_path(model)
          - if allow_destroy
            td= button_to "Destroy", model, method: :delete

javascript:
  function updateResidentStatus(target) {
    form = jQuery(target).siblings('form');
    console.debug("submitForm", 'form:', form, 'target:', target);
    form.trigger('submit.rails');
    // form.submit();
  }

  function updateVerifiedOn(target) {
    form = jQuery(target).siblings('form');
    console.debug("submitForm", 'form:', form, 'target:', target);
    form.trigger('submit.rails');
    // form.submit();
  }
